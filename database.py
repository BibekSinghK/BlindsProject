import sqlite3

class Database:
    def __init__(self):
        self.conn = sqlite3.connect("blinds_app.db")
        self.cursor = self.conn.cursor()

    def create_tables(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS customers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL
            );
        """)
        
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS blinds (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_id INTEGER,
                location TEXT,
                blind_type TEXT,
                fabric TEXT,
                width TEXT,
                height TEXT,
                control TEXT,
                control_material TEXT,
                control_position TEXT,
                bracket_type TEXT,
                quantity INTEGER,
                price REAL,
                FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE
            );
        """)
        
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS rollerb (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                price REAL
            );
        """)
        
        self.cursor.execute("""
            INSERT INTO rollerb (code, price) VALUES
            ('FC708-01', 17.2),
            ('FC708-02', 17.2),
            ('FC708-03', 17.2),
            ('FC708-04', 17.2),
            
            ('FC709-01', 10.5),
            ('FC709-02', 10.5),
            ('FC709-03', 10.5),
            
            ('FC710-01', 15.4),
            ('FC710-02', 15.4),
            ('FC710-03', 15.4),
            ('FC710-04', 15.4),
            ('FC710-05', 15.4),
            
            ('FC711-01', 11.5),
            ('FC711-02', 11.5),
            ('FC711-03', 11.5),
            ('FC711-04', 11.5),
            ('FC711-05', 11.5),
            ('FC711-06', 11.5),
            ('FC711-07', 11.5),
            
            ('FB311-01', 11.5),
            ('FB311-02', 11.5),
            ('FB311-03', 11.5),
            ('FB311-04', 11.5),
            ('FB311-05', 11.5),
            ('FB311-06', 11.5),
            
            ('FB318-01', 15.1),
            ('FB318-02', 15.1),
            ('FB318-03', 15.1),
            ('FB318-04', 15.1),
            ('FB318-05', 15.1),
            ('FB318-06', 15.1),
            
            ('FB322-01', 13.1),
            ('FB322-02', 13.1),
            ('FB322-03', 13.1),
            ('FB322-04', 13.1),
            
            ('FB325-01', 16.2),
            ('FB325-02', 16.2),
            ('FB325-03', 16.2),
            ('FB325-04', 16.2),
            ('FB325-05', 16.2),
            ('FB325-06', 16.2),
            
            ('FB361-01', 11.5),
            ('FB361-02', 11.5),
            ('FB361-03', 11.5),
            ('FB361-04', 11.5),
            
            ('FB362-01', 18.2),
            ('FB362-02', 18.2),
            ('FB362-03', 18.2),
            ('FB362-04', 18.2),
            ('FB362-05', 18.2),
            
            ('FB363-01', 18.2),
            ('FB363-02', 18.2),
            ('FB363-03', 18.2),
            ('FB363-04', 18.2),
            ('FB363-05', 18.2),
            
            ('FB510-01', 15.4),
            ('FB510-02', 15.4),
            ('FB510-03', 15.4),
            ('FB510-04', 15.4),
            ('FB510-05', 15.4),
            ('FB510-06', 15.4),
            
            ('FB513-01', 13.8),
            ('FB513-02', 13.8),
            ('FB513-03', 13.8),
            ('FB513-04', 13.8),
            ('FB513-05', 13.8),
            
            ('FB514-01', 11.7),
            ('FB514-02', 11.7),
            ('FB514-03', 11.7),
            ('FB514-04', 11.7),
            ('FB514-05', 11.7),
            
            ('FB515-01', 11.5),
            ('FB515-02', 11.5),
            ('FB515-03', 11.5),
            ('FB515-04', 11.5),
            ('FB515-05', 11.5),
            ('FB515-06', 11.5),
            
            ('FB516-01', 13.1),
            ('FB516-02', 13.1),
            ('FB516-03', 13.1),
            ('FB516-04', 13.1),
            ('FB516-05', 13.1),
            ('FB516-06', 13.1),
            ('FB516-07', 13.1),
            
            ('FB364-1', 20.3),
            ('FB364-2', 20.3),
            ('FB364-3', 20.3),
            ('FB364-4', 20.3),
            ('FB364-5', 20.3),
            
            ('FB365-1', 13.8),
            ('FB365-2', 13.8),
            ('FB365-3', 13.8),
            ('FB365-4', 13.8),
            
            ('FB366-1', 18.5),
            ('FB366-2', 18.5),
            ('FB366-3', 18.5),
            ('FB366-4', 18.5),
            ('FB366-5', 18.5),
            
            ('FB367-1', 11.1),
            ('FB367-2', 11.1),
            ('FB367-3', 11.1),
            ('FB367-4', 11.1),
            
            ('FB368-1', 11.1),
            ('FB368-2', 11.1),
            ('FB368-3', 11.1);
        """)
        
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS roller (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                price REAL
            );
        """)
        
        self.cursor.execute("""
            INSERT INTO roller (code, price) VALUES
            ('FC601-01', 14.9),
            ('FC601-02', 14.9),
            ('FC601-03', 14.9),
            ('FC601-04', 14.9),
            ('FC601-05', 14.9),

            ('FC602-01', 14.6),
            ('FC602-02', 14.6),
            ('FC602-03', 14.6),
            ('FC602-04', 14.6),
            ('FC602-05', 14.6),
            ('FC602-06', 14.6),

            ('FC603-01', 10.5),
            ('FC603-02', 10.5),
            ('FC603-03', 10.5),
            ('FC603-04', 10.5),
            ('FC603-05', 10.5),

            ('FC604-01', 10.0),
            ('FC604-02', 10.0),
            ('FC604-03', 10.0),
            ('FC604-04', 10.0),
            ('FC604-05', 10.0),

            ('FC701-01', 13.1),
            ('FC701-02', 13.1),
            ('FC701-03', 13.1),
            ('FC701-04', 13.1),
            ('FC701-05', 13.1),
            ('FC701-06', 13.1),

            ('FC702-01', 13.5),
            ('FC702-02', 13.5),
            ('FC702-03', 13.5),
            ('FC702-04', 13.5),
            ('FC702-05', 13.5),

            ('FC703-01', 12.0),
            ('FC703-02', 12.0),
            ('FC703-03', 12.0),
            ('FC703-04', 12.0),
            ('FC703-05', 12.0),
            ('FC703-06', 12.0),

            ('FC704-01', 12.0),
            ('FC704-02', 12.0),
            ('FC704-03', 12.0),
            ('FC704-04', 12.0),

            ('FC705-01', 10.5),
            ('FC705-02', 10.5),
            ('FC705-03', 10.5),
            ('FC705-04', 10.5),
            ('FC705-05', 10.5),

            ('FC706-01', 12.0),
            ('FC706-02', 12.0),
            ('FC706-03', 12.0),
            ('FC706-04', 12.0),
            ('FC706-05', 12.0),
            ('FC706-06', 12.0),

            ('FC605-01', 10.8),
            ('FC605-02', 10.8),
            ('FC605-03', 10.8),
            ('FC605-04', 10.8),
            ('FC605-05', 10.8),

            ('FC606-01', 9.2),
            ('FC606-02', 9.2),
            ('FC606-03', 9.2),
            ('FC606-04', 9.2),
            ('FC606-05', 9.2),

            ('FC607-01', 7.7),
            ('FC607-02', 7.7),
            ('FC607-03', 7.7),
            ('FC607-04', 7.7),
            ('FC607-05', 7.7),
            ('FC607-06', 7.7),
            ('FC607-07', 7.7),
            ('FC607-08', 7.7),

            ('FC609-01', 13.1),
            ('FC609-02', 13.1),
            ('FC609-03', 13.1),
            ('FC609-04', 13.1),

            ('FC611-01', 9.2),
            ('FC611-02', 9.2),
            ('FC611-03', 9.2),
            ('FC611-04', 9.2),
            ('FC611-05', 9.2),
            ('FC611-06', 9.2),
            ('FC611-07', 9.2),
            ('FC611-08', 9.2),

            ('FC612-01', 11.5),
            ('FC612-02', 11.5),
            ('FC612-03', 11.5),
            ('FC612-04', 11.5),

            ('FC615-01', 11.5),
            ('FC615-02', 11.5),
            ('FC615-03', 11.5),
            ('FC615-04', 11.5),
            ('FC615-05', 11.5),

            ('FC616-01', 9.2),
            ('FC616-02', 9.2),
            ('FC616-03', 9.2),
            ('FC616-04', 9.2),

            ('FC617-01', 10.8),
            ('FC617-02', 10.8),
            ('FC617-03', 10.8),
            ('FC617-04', 10.8),
            ('FC617-05', 10.8),

            ('FC622-01', 9.2),
            ('FC622-02', 9.2),
            ('FC622-03', 9.2),

            ('FC623-01', 15.4),
            ('FC623-02', 15.4),
            ('FC623-03', 15.4),

            ('FC625-01', 15.4),
            ('FC625-02', 15.4),
            ('FC625-03', 15.4),
            ('FC625-04', 15.4),
            ('FC625-05', 15.4),
            ('FC625-06', 15.4),

            ('FC626-01', 15.4),
            ('FC626-02', 15.4),
            ('FC626-03', 15.4),
            ('FC626-04', 15.4);
        """)
        
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS shangrila (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                price REAL
            );
        """)
        
        self.cursor.execute("""
            INSERT INTO shangrila (code, price) VALUES
            ('60-N101', 18.3),
            ('60-N102', 18.3),
            ('60-N103', 18.3),
            ('60-N104', 18.3),
            ('60-N105', 18.3),
            ('60-N106', 18.3),

            ('60-NB201', 22.5),
            ('60-NB202', 22.5),
            ('60-NB203', 22.5),
            ('60-NB204', 22.5),
            ('60-NB205', 22.5),
            ('60-NB206', 22.5),

            ('75-N301', 20.0),
            ('75-N302', 20.0),
            ('75-N303', 20.0),
            ('75-N304', 20.0),
            ('75-N305', 20.0),
            ('75-N306', 20.0),

            ('75-NB401', 24.0),
            ('75-NB402', 24.0),
            ('75-NB403', 24.0),
            ('75-NB404', 24.0),
            ('75-NB405', 24.0),
            ('75-NB406', 24.0),

            ('75-N501', 21.5),
            ('75-N502', 21.5),
            ('75-N503', 21.5),

            ('75-NB601', 26.5),
            ('75-NB602', 26.5),
            ('75-NB603', 26.5),

            ('60-N701', 20.0),
            ('60-N702', 20.0),
            ('60-N703', 20.0),

            ('60-NB801', 24.0),
            ('60-NB802', 24.0),
            ('60-NB803', 24.0),

            ('60-N901', 21.5),
            ('60-N902', 21.5),
            ('60-N903', 21.5),
            ('60-N904', 21.5),
            ('60-N905', 21.5),
            ('60-N906', 21.5),

            ('75-N1001', 31.0),
            ('75-N1002', 31.0),
            ('75-N1003', 31.0),
            ('75-N1004', 31.0),

            ('75-N1101', 20.8),
            ('75-N1102', 20.8),
            ('75-N1103', 20.8),
            ('75-N1104', 20.8),

            ('75-NB1201', 25.6),
            ('75-NB1202', 25.6),
            ('75-NB1203', 25.6),
            ('75-NB1204', 25.6),

            ('75-N1301', 21.5),
            ('75-N1302', 21.5),
            ('75-N1303', 21.5),
            ('75-N1304', 21.5),

            ('75-NB1401', 26.5),
            ('75-NB1402', 26.5),
            ('75-NB1403', 26.5),
            ('75-NB1404', 26.5);
        """)
        
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS zebra (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                price REAL
            );
        """)
        
        self.cursor.execute("""
            INSERT INTO zebra (code, price) VALUES
            ('MA1-001', 16.8),
            ('MA1-002', 16.8),
            ('MA1-003', 16.8),
            ('MA1-004', 16.8),
            ('MA1-005', 16.8),
            ('MA1-006', 16.8),

            ('MA2-001', 18.3),
            ('MA2-002', 18.3),
            ('MA2-003', 18.3),

            ('MA3-001', 17.5),
            ('MA3-002', 17.5),
            ('MA3-003', 17.5),
            ('MA3-004', 17.5),

            ('MA4-001', 20),
            ('MA4-002', 20),
            ('MA4-003', 20),

            ('MA5-001', 21.5),

            ('MA6-001', 20),
            ('MA6-002', 20),
            ('MA6-003', 20),
            ('MA6-004', 20),
            ('MA6-005', 20),
            ('MA6-006', 20),
            ('MA6-007', 20),

            ('MA7-001', 13.5),
            ('MA7-002', 13.5),
            ('MA7-003', 13.5),
            ('MA7-004', 13.5),

            ('MA8-001', 13.5),
            ('MA8-002', 13.5),
            ('MA8-003', 13.5),
            ('MA8-004', 13.5),
            ('MA8-005', 13.5),

            ('TB1-001', 21.5),
            ('TB1-002', 21.5),
            ('TB1-003', 21.5),
            ('TB1-004', 21.5),
            ('TB1-005', 21.5),
            ('TB1-006', 21.5),

            ('TB2-001', 22),
            ('TB2-002', 22),
            ('TB2-003', 22),
            ('TB2-004', 22),

            ('TB3-001', 19),
            ('TB3-002', 19),
            ('TB3-003', 19),
            ('TB3-004', 19),
            ('TB3-005', 19),
            ('TB3-006', 19),
            ('TB3-007', 19),

            ('TB4-001', 20),
            ('TB4-002', 20),
            ('TB4-003', 20),
            ('TB4-004', 20),

            ('TB5-001', 20),
            ('TB5-002', 20),
            ('TB5-003', 20),
            ('TB5-004', 20),
            ('TB5-005', 20),
            ('TB5-006', 20),
            ('TB5-007', 20),

            ('TB6-001', 22.3),
            ('TB6-002', 22.3),
            ('TB6-003', 22.3),
            ('TB6-004', 22.3),

            ('TB7-001', 22.3),
            ('TB7-002', 22.3),
            ('TB7-003', 22.3),

            ('TB8-001', 21.5),
            ('TB8-002', 21.5),
            ('TB8-003', 21.5),
            ('TB8-004', 21.5),
            ('TB8-005', 21.5),

            ('MA9-001', 18.3),
            ('MA9-002', 18.3),
            ('MA9-003', 18.3),
            ('MA9-004', 18.3),

            ('TB9-001', 20),
            ('TB9-002', 20),
            ('TB9-003', 20),
            ('TB9-004', 20),

            ('MA10-001', 22),
            ('MA10-002', 22),

            ('MA11-001', 15.6),

            ('MA23-001', 17.5),
            ('MA23-002', 17.5),
            ('MA23-004', 17.5),
            ('MA23-003', 17.5),

            ('MA12-001', 15.6),

            ('MA13-001', 12),

            ('MA14-001', 16.8),
            ('MA14-002', 16.8),
            ('MA14-003', 16.8),
            ('MA14-004', 16.8),
            ('MA14-005', 16.8),
            ('MA14-006', 16.8),

            ('MA15-001', 13.5),
            ('MA15-002', 13.5),

            ('TB10-001', 20),
            ('TB10-002', 20),

            ('MA16-001', 20),

            ('TB11-001', 21.5),
            ('TB11-002', 21.5),
            ('TB11-003', 21.5),
            ('TB11-004', 21.5),

            ('MA17-001', 15.1),
            ('MA17-002', 15.1),
            ('MA17-003', 15.1),
            ('MA17-004', 15.1),

            ('MA18-001', 20),
            ('MA18-002', 20),

            ('MA19-001', 15.6),
            ('MA19-002', 15.6),
            ('MA19-003', 15.6),
            ('MA19-004', 15.6),
            ('MA19-005', 15.6),

            ('MA20-001', 17.5),

            ('MA21-001', 14.3),
            ('MA21-002', 14.3),
            ('MA21-003', 14.3),

            ('MA24-001', 14.3),
            ('MA24-002', 14.3),
            ('MA24-003', 14.3),

            ('MA25-001', 23),
            ('MA25-002', 23),
            ('MA25-003', 23),
            ('MA25-004', 23),

            ('TB14-001', 25.8),
            ('TB14-002', 25.8),
            ('TB14-003', 25.8),
            ('TB14-004', 25.8),
            ('TB14-005', 25.8),

            ('MA26-001', 18.3),

            ('MA27-001', 18.3),

            ('MA28-001', 19.2),
            ('MA28-002', 19.2),

            ('TB15-001', 36.6),

            ('TB16-001', 34.2),

            ('MA29-001', 21.5),
            ('MA29-002', 21.5);
        """)
        
        self.conn.commit()

    def add_customer(self, name):
        self.cursor.execute("INSERT INTO customers (name) VALUES (?)", (name,))
        self.conn.commit()
        return self.cursor.lastrowid

    def add_blind(self, customer_id, location, blind_type, fabric, width, height, control, control_material, control_position, bracket, quantity, price):
        self.cursor.execute(f'''
        INSERT INTO blinds (customer_id, location, blind_type, fabric, width, height, control, control_material, control_position, bracket_type, quantity, price)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        ''', (customer_id, location, blind_type, fabric, width, height, control, control_material, control_position, bracket, quantity, price))
        self.conn.commit()

    def get_customers(self):
        self.cursor.execute("SELECT * FROM customers;")
        return self.cursor.fetchall()

    def get_blinds_for_customer(self, customer_id):
        self.cursor.execute(f"SELECT * FROM blinds WHERE customer_id = {customer_id};")
        return self.cursor.fetchall()
    
    def get_blind_types(self, blind_type):
        db_map = {
            "Zebra": "zebra",
            "Roller": "roller",
            "Roller Blackout": "rollerb",
            "Shangri-La": "shangrila"
        }
        self.cursor.execute(f"SELECT code FROM {db_map[blind_type]};")
        return [row[0] for row in self.cursor.fetchall()]
    
    def get_blind_price(self, blind_type, blind_code):
        db_map = {
            "Zebra": "zebra",
            "Roller": "roller",
            "Roller Blackout": "rollerb",
            "Shangri-La": "shangrila"
        }
        self.cursor.execute(f"SELECT price FROM {db_map[blind_type]} WHERE code = ?;", (blind_code, ))
        return self.cursor.fetchone()[0]
        
